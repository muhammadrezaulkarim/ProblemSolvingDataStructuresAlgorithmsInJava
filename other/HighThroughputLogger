import java.util.*;

public class HighThroughputLogger {

	Map<String, Integer> map = new HashMap<String, Integer>();
	// required when you we do not use stream api for sorting
	List<TopicStat> topicStats = new ArrayList<TopicStat>();

	public void logTopic(String topic) {

		int count = map.getOrDefault(topic, 0);

		map.put(topic, count + 1);

		topicStats.add(new TopicStat(topic, count + 1));

	}

	public void printAll() {
		/*
		 * for (Map.Entry<String, Integer> entry : map.entrySet()) {
		 * System.out.println(String.format("Topic: %s , Count: %s", entry.getKey(),
		 * entry.getValue())); }
		 */

		map.entrySet().forEach(
				(entry) -> System.out.println(String.format("Topic: %s Count: %s", entry.getKey(), entry.getValue())));
	}

	public void printTop5TopicInAscendingOrder() {
		/*
		 * topicStats.sort(new Comparator<TopicStat>() {
		 * 
		 * @Override public int compare(TopicStat o1, TopicStat o2) { return
		 * o1.count.compareTo(o2.count); }
		 * 
		 * });
		 */
		
		topicStats.sort((TopicStat o1, TopicStat o2) -> o1.count.compareTo(o2.count));

		topicStats.stream().limit(5)
				.forEach((entry) -> System.out.println(String.format("Topic: %s Count: %s", entry.topic, entry.count)));
	}
	
	public void printTop5TopicInAscendingOrderFunctional() {
		
		List<Map.Entry<String, Integer>> sortedEntryList = map.entrySet().stream().sorted(Map.Entry.comparingByValue()).toList();
		
		sortedEntryList.stream().limit(5) // only top 5 considered
		.forEach((entry) -> System.out
				.println(String.format("Topic: %s Count: %s", entry.getKey(), entry.getValue())));

	}

	public void printTop5TopicInDescendingOrder() {

		/*
		 * topicStats.sort(new Comparator<TopicStat>() {
		 * 
		 * @Override public int compare(TopicStat o1, TopicStat o2) { return
		 * o2.count.compareTo(o1.count); } });
		 */
		
		topicStats.sort((TopicStat o1, TopicStat o2) -> o1.count.compareTo(o2.count));

		topicStats.stream().limit(5) // considers only the top 5 elements of the list
				.forEach((entry) -> System.out.println(String.format("Topic: %s Count: %s", entry.topic, entry.count)));

	}

	public void printTop5TopicInDescendingOrderFunctional() {

		List<Map.Entry<String, Integer>> sortedEntryList = map.entrySet().stream()
				.sorted(Collections.reverseOrder(Map.Entry.comparingByValue())).toList();

		sortedEntryList.stream().limit(5) // only top 5 considered
				.forEach((entry) -> System.out
						.println(String.format("Topic: %s Count: %s", entry.getKey(), entry.getValue())));

	}

	public static void main(String args[]) {
		HighThroughputLogger obj = new HighThroughputLogger();

		obj.logTopic("A");
		obj.logTopic("B");
		obj.logTopic("A");
		obj.logTopic("B");
		obj.logTopic("C");
		obj.logTopic("E");
		obj.logTopic("D");
		obj.logTopic("F");
		obj.logTopic("G");

		// obj.printAll();
		// obj.printTop5TopicInDescendingOrder();
		obj.printTop5TopicInDescendingOrderFunctional();
		//obj.printTop5TopicInAscendingOrder();
		//obj.printTop5TopicInAscendingOrderFunctional();
	}

	// required when you we do not use stream api for sorting
	private class TopicStat {
		String topic;
		Integer count;

		public TopicStat(String topic, int count) {
			this.topic = topic;
			this.count = count;
		}
	}
}
